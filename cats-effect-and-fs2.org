#+OPTIONS: num:nil toc:nil \n:t reveal_single_file:t
#+REVEAL_THEME: solarized
#+REVEAL_TRANS: Slide
#+Title: Real world FP with Cats-Effect and Fs2
#+Author: Jilen
#+Email: jilen.zhang@gmail.com

* Real world
  with
  Cats-Effect and Fs2
** Jilen
   @ 水滴技术团队
** 公司介绍
   + 微信公众号相关服务
   + 处理较大量的微信消息推送
   + 保存较大量的用户数据
   #+BEGIN_NOTES
   在并发/存储/编程范式上做了一些微小工作
   #+END_NOTES
** 水滴技术概况
   + 后端几乎完全基于Scala
   + Play Framework / Quill / Akka
   + postgres / mysql / Kafka / ES
   + 全异步
   + FP - cats / cats-effect / shapeless
   #+BEGIN_NOTES
   非主流技术选型
   #+END_NOTES
* Why?
** 提升知识水平...
*** [[./img/alex.png]]
*** [[./img/alex0.jpg]]
*** Alex Nedelcu
    My first resume, circa 2004, please try not to laugh too hard. Apparently I had "good OOP programming skills", "proven leadership skills" and knew DHTML and Corel Draw, OMFG
** John A. De Goes
   + scalaz manitaner
   + scalaz-zio 作者
** 大佬怎么说
   #+NAME:   fig:SED-HR4049
   [[./img/john.png]]

* Cats-Effect
** Typeclass
   #+BEGIN_SRC dot :file img/hierarchy.svg :cmdline -Kdot -Tsvg
digraph typeclass {
  graph [bgcolor="transparent"]
  node [shape=box, fontname="monospace"];
  Bracket -> MonadError
  Sync -> Bracket
  Async -> Sync
  Effect -> Async
  Concurrent -> Async
  ConcurrentEffect -> Effect
}
   #+END_SRC

** Why not Future
   #+CAPTION: IO vs Future
   #+NAME:   tab:features
   - 不安全
   - 性能差
   - 难以推理

** Parallelism with Future
   #+BEGIN_SRC scala
val f1 = Future {
  Thread.sleep(1000)
  1
}
val f2 = Future {
  Thread.sleep(1000)
  2
}
for {
  r1 <- f1
  r2 <- f2
} yield (r1, r2)
   #+END_SRC

** Parallelism with IO
   #+BEGIN_SRC scala
def ioParallel = {
    //Through cats.Parallel
    val f1 = IO.sleep(1.seconds).as(1)
    val f2 = IO.sleep(1.seconds).as(1)
    (f1, f2).parTupled
}
   #+END_SRC

** Cancelable (Fiber)
   #+BEGIN_SRC scala
def ioCancelable = {

    def setInterval[A](i: FiniteDuration, f: IO[A]): IO[Unit] = {
      def loop() = {
        IO.sleep(i) >> f.runAsync(_ => IO.unit) >> loop()
      }
      loop().start.flatMap(_.cancel)
    }

    for {
      m <- setInterval(i, IO(println("Hi"))).start
      _ <- IO.sleep(1.seconds)
      _ <- m.cancel
    } yield {}
}
   #+END_SRC

** Concurrency primitives
   + Ref - AtomicRefrence
   + Deferred - Promise
   + MVar ~ BlocingQueue(1)
   + Semaphore
** Pros
   + Asynchronicity
   + Composability
   + Concurrency
   + Interruptibility
   + Resource Safety
* Cats-Effect实践

** 数据库操作
   + doobie
   + quill(mysql/postgres async)

*** Pros
    + Slick紧耦合JDBC, Quill可以支持多个后端
    + Quill编译时候生成SQL（可以在IDE/Console看到）
    + Quill可以很容易

*** Quill internal
    #+BEGIN_SRC dot :file img/quill-flow.svg :cmdline -Kdot -Tsvg
digraph quill {
  graph [bgcolor="transparent"];
  node [fontname = "monospace", shape="box"];
  scala [label="Scala AST", xlabel="query[Foo].map(_.id)"];
  quill[label="Macro expansion", xlabel="xxxContext.run(quotedAst)"];
  output[label="SQL", xlabel="xxxContext.executeQuery(sql)"];
  scala -> quill
  quill -> output
}
    #+END_SRC

*** Cons
    + 不支持复杂的join（无法正确进行Beta-Reduction，短时间内很难修复）
    + 会生成带空格的ident（会导致老版本sbt增量编译无法工作）
    + 可能会出现maximum string literal length exceeded

*** Mysql-Async的问题
    + 作者不再维护
    + ConnectionPool实现非常error-prone
    + 不会关闭PreparedStatement(mysql)

*** Fix Mysql-Async Pooling

    #+BEGIN_SRC scala
final case class State[F[_], A](
  queue: Vector[A],
  deq:   Vector[Deferred[F, A]]
)
class Queue[F[_], A](ref: Ref[F, State[F, A]])
  (implicit F: ConcurrentEffect[F], T: Timer[F]) {

  def enqueue(a: A): F[Unit]
  def timedDequeue(timeout: FiniteDuration): F[Option[A]]

}

    #+END_SRC

*** enqueue
    #+BEGIN_SRC scala
def enqueue(a: A): F[Unit] = {
    ref.modify { s =>
      if (s.deq.isEmpty) {
        (s.copy(queue = s.queue :+ a), None)
      } else {
        (s.copy(deq = s.deq.tail), Some(s.deq.head))
      }
    }.flatMap {
      case Some(h) =>
        F.runAsync(h.complete(a))(_ => IO.unit).to[F]
      case None =>
        F.unit
    }
}
    #+END_SRC
*** dequeue
    #+BEGIN_SRC scala
  private def cancellableDequeue1(): F[(Either[Deferred[F, A], A], F[Unit])] = {
    Deferred[F, A].flatMap { defer =>
      ref.modify { s =>
        if (s.queue.isEmpty)
          (s.copy(deq = s.deq :+ defer), None)
        else
          (s.copy(queue = s.queue.drop(1)), Some(s.queue.take(1).head))
      }.map {
        case Some(h) =>
          (Right(h), F.unit)
        case None =>
          (Left(defer), ref.modify { s =>
            (s.copy(deq = s.deq.filterNot(_ == defer)), {})
          })
      }
    }
}
    #+END_SRC

** dequeue
   #+BEGIN_SRC scala
def timedDequeue(duration: FiniteDuration): F[Option[A]] = {
    cancellableDequeue1().flatMap {
      case (Right(v), _) => F.pure(Some(v))
      case (Left(defer), cancel) =>
        val timeout = T.sleep(duration)
        F.race(timeout, defer.get).flatMap {
          case Right(v) => F.pure(Some(v))
          case Left(_)  => cancel.as(None)
        }
    }
}
   #+END_SRC

** Http Client

   #+BEGIN_SRC scala
implicit class AhcSyntax[F[_]](req: BoundedRequestBuilder)(implicit F: Concurrent[F]) {
  def run() = F.cancelable[Response] { k =>
    val future = req.execute(new AsyncCompletionHandler[Unit] {
      override onThrowable(Throwable t) = {
        k(Left(t))
      }
      override onCompleted(res: Response) = {
        k(Right(res))
      }
    })
    F.delay(future.cancel())
  }
}
   #+END_SRC

** Blocking Code

   #+BEGIN_SRC scala
def shift[F[_], A](f: => A)(ec: ExecutionContext)(implicit F: Sync[F]) = {
  S.evalOn(ec)(F.delay(f))
}
   #+END_SRC

** 代码组织
*** 定义Alg
    #+BEGIN_SRC scala
trait UserAlg[F[_]] {
  def add(a: User): F[Long]
  def get(id: Long): F[Option[User]]
}
    #+END_SRC

*** ADT with Free
    #+BEGIN_SRC scala
  sealed trait UserOpA[A]
  case class Add(u: User) extends UserOpA[Long]
  case class Get(id: Long) extends UserOpA[Option[User]]
  type UserOp[A] = Free[UserOpA, A]

  def add(u: User): UserOp[Long] = Free.liftF[UserOpA, Long](new Add(u))
  def get(id: Long): UserOp[Option[User]] = Free.liftF[UserOpA, Option[User]](new Get(id))

  def init(u: User) = {
    get(u.id).flatMap {
      case Some(u) => Free.pure(u)
      case None => add(u).map(id => u.copy(id = id))
    }
  }
    #+END_SRC

*** Algbera with F
    #+BEGIN_SRC scala
class AlgWithFApp[F[_]](alg: UserAlg[F])(implicit F: Monad[F]) {
  def init(user: User) = alg.get(user.id).flatMap {
    case None => alg.add(user).map(id => user.copy(id = id))
    case Some(h) => F.pure(h)
  }
}
    #+END_SRC

*** 用类型处理错误

    #+BEGIN_SRC scala
sealed trait UserLoginErr extends Exception
object UserLoginErr {
  case class NotExists(email: String) extends UserErr
  case object PasswordIncorrect extends UserErr
}
trait UserAlg[F[_]] {
  def login(email: String, pass: String): F[Either[UserLoginErr, Unit]]
}
    #+END_SRC

* Fs2

  Streaming your data with *Stream*

** Stream是什么
   + 标准库的 *Stream* - 可能是无限长的队列
   + fs2.Stream - 和标准库类似，但是这些元素可以通过 *eval* 副作用 *F* 获得
   #+BEGIN_NOTES
   实践过程中经常需要处理副作用
   #+END_NOTES
** 什么是简单
   + 优雅(概念少)
   + 复杂(概念多)
   + 容易
** Elegant
   #+BEGIN_SRC scala
type Pipe[F[_], I, O] = Stream[F, I] => Stream[F, O]
type Sink[F[_], I] = Pipe[F, I, Unit]
trait Topic {
  def publish: Sink[F, A]
  def subscribe: Stream[F, A]
}
trait Queue[F[_], A] {
  def enqueue: Sink[F, A]
  def dequeue: Stream[F, A]
}
   #+END_SRC

** Powerful
   + Combinators（scan/fold/split...）
   + Stateful transofrm with Pull

** Streaming query
   #+BEGIN_SRC scala
case class User(id: Long)

def readFrom(minId: Long): F[Seq[User]] = ???
def sendMsg(u: User): F[Unit]

def stream() = {
  def loop(from: Long): Stream[F, User] =
    Stream.eval(readFrom(from)).flatMap {
      case us if !us.isEmpty => Stream.emits(us) ++ loop(us.map(_.id).max)
      case us => Stream.empty
    }
  }
}
stream().evalMap(sendMsg)
   #+END_SRC

** Prallel process
   #+BEGIN_SRC scala
 stream().mapAsync(100)(sendMsg)
   #+END_SRC

** Streaming mysql binlog
   #+BEGIN_SRC scala
def stream[F[_]](cli: BinaryLogClient)(implicit F: ConcurrentEffect[F]) = {

    def register(queue: Queue[F, Event]) = F.delay {
      cli.registerEventListener(new BinaryLogClient.EventListener() {
        override def onEvent(event: Event) {
          F.toIO(queue.enqueue1(event)).unsafeRunSync() //Blocking
        }
      })
      cli.connect(3000) //Spawns in new Thread
    }

    Stream.bracket {
      Queue.bounded[F, Event](1000).flatTap(register)
    } {
      _ => F.delay(cli.disconnect())
    }.flatMap(q => q.dequeueAvailable)

}
   #+END_SRC
** Streaming postgres listen

** Streaming kafka consumer
** Backpuress with Queue
   + bounded
   + unbounded
   + circularBuffer

** Merge
   #+BEGIN_SRC scala
def merge[F[_]: ConcurrentEffect, A] {
    def fromQuery: Stream[F, A] = ???
    def fromRealtime: Stream[F, A] = ???
    def stream = fromQuery.merge(fromRealtime)
}
   #+END_SRC

** ParJoin
   #+BEGIN_SRC scala
def parJoin[F[_]: ConcurrentEffect, A] = {
    def conns: Stream[F, Con]
    def request(c: Con): Stream[F, Msg]
    def reply(m: Msg): F[Unit]
    def run() = conns.flatMap(request).parJoin(1000).evalMap(reply)
}
   #+END_SRC
** Transform with Pull
** More
   + Signal
   + Topic
* Thanks
